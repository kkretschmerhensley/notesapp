{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/subscriptions.js","graphql/mutations.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","loading","error","form","name","description","reducer","state","action","type","note","value","App","useReducer","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listNotes","items","sort","b","console","useEffect","subscription","subscribe","next","onCreateNote","clientId","unsubscribe","styles","container","padding","input","marginBottom","item","textAlign","p","color","createNote","alert","completed","id","variables","log","onChange","e","target","deleteNote","noteToDelete","filter","x","updateNote","noteToUpdate","map","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d190dc1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useEffect, useReducer } from 'react';\nimport { API } from 'aws-amplify';\n\nimport { List, Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport { listNotes } from './graphql/queries';\nimport { v4 as uuid } from 'uuid';\nimport {\n  createNote as CreateNote,\n  deleteNote as DeleteNote,\n  updateNote as UpdateNote\n} from './graphql/mutations';\n\nimport { onCreateNote } from './graphql/subscriptions';\n\nconst CLIENT_ID = uuid();\n\nconst initialState = {\n  notes: [],\n  loading: true,\n  error: false,\n  form: { name: '', description: '' }\n};\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n\n    case 'SET_NOTES':\n      return { ...state, notes: action.notes, loading: false };\n\n    case 'ERROR':\n      return { ...state, loading: false, error: true };\n\n    case 'ADD_NOTE':\n      return { ...state, notes: [...state.notes, action.note] };\n\n    case 'RESET_FORM':\n      return { ...state, form: initialState.form };\n\n    case 'SET_INPUT':\n      return { ...state, form: {...state.form, [action.name]: action.value} }\n\n    default:\n      return { ...state };\n  }\n};\n\nconst App = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchNotes = async () => {\n    try {\n      const notesData = await API.graphql({\n        query: listNotes\n      });\n      dispatch({\n        type: 'SET_NOTES',\n        notes: notesData.data.listNotes.items.sort((a, b) => a.name >= b.name ? 1 : -1)\n      });\n    }\n\n    catch (err) {\n      console.error('error: ', err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchNotes();\n\n    const subscription = API.graphql({\n      query: onCreateNote\n    })\n      .subscribe({\n        next: notesData => {\n          // get the note from the subscription payload\n          const note = notesData.value.data.onCreateNote;\n\n          // bail if this instance of the app caused this subscription notification\n          if (note.clientId === CLIENT_ID) {\n            return;\n          }\n\n          // otherwise, update the state with the new note\n          dispatch({\n            type: 'ADD_NOTE',\n            note: note\n          });\n        }\n      })\n      return () => subscription.unsubscribe();\n  }, []\n  );\n\n  const styles = {\n    container: {padding: 20},\n    input: {marginBottom: 10},\n    item: {textAlign: 'left'},\n    p: {color: '#1890ff'}\n  };\n\n  const createNote = async () => {\n    // desctructuring\n    const { form } = state;\n\n    if (!form.name || !form.description) {\n      return alert('please enter a name and description');\n    }\n\n    const note = {\n      ...form,\n      clientId: CLIENT_ID,\n      completed: false,\n      id: uuid()\n    };\n\n    // optimistic dispatch, updates local app state before calling GraphQL mutation endpoint\n    dispatch({\n      type: 'ADD_NOTE',\n      // shorthand syntax for note: note\n      note\n    });\n\n    dispatch({\n      type: 'RESET_FORM'\n    });\n\n    try {\n      await API.graphql({\n        query: CreateNote,\n        variables: { input: note }\n      });\n      console.log('successfully created note!');\n    }\n\n    catch (err) {\n      console.log(\"error: \", err);\n    }\n  };\n\n  const onChange = (e) => {\n    dispatch({\n      type: 'SET_INPUT',\n      name: e.target.name,\n      value: e.target.value\n    });\n  };\n\n  const deleteNote = async (noteToDelete) => {\n    // optimistically update state with the note removed\n    dispatch({\n      type: \"SET_NOTES\",\n      notes: state.notes.filter(x => x != noteToDelete)\n    });\n\n    // call the backend to delete the note\n    try {\n      await API.graphql({\n        query: DeleteNote,\n        variables: { input: {id: noteToDelete.id} }\n      });\n    }\n\n    catch (err) {\n      console.error(err);\n    }\n  };\n\n  const updateNote = async (noteToUpdate) => {\n    // update state\n    dispatch({\n      type: 'SET_NOTES',\n      notes: state.notes.map(x => ({\n        ...x, completed: x == noteToUpdate ? !x.completed : x.completed\n      }))\n    });\n\n    // call the backend\n    try {\n      await API.graphql({\n        query: UpdateNote,\n        variables: {\n          input: {\n            id: noteToUpdate.id,\n            completed: !noteToUpdate.completed\n          }\n        }\n      });\n    }\n\n    catch (err) {\n      console.error(err);\n    }\n  };\n\n  const renderItem = (item) => {\n    return (\n      <List.Item\n        style={styles.item}\n        actions={[\n          <p style={styles.p} onClick={() => deleteNote(item)}>Delete</p>,\n          <p style={styles.p} onClick={() => updateNote(item)}>\n            {item.completed ? 'Mark Incomplete' : 'Mark Complete'}\n          </p>\n        ]}\n      >\n        <List.Item.Meta\n          title={`${item.name} ${item.completed ? '(completed)' : ''}`}\n          description={item.description}\n        />\n      </List.Item>\n    );\n  };\n\n  return (\n    <div style={styles.container}>\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Note Name\"\n        name='name'\n        style={styles.input}\n      />\n\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Note description\"\n        name='description'\n        style={styles.input}\n      />\n\n      <Button\n        onClick={createNote}\n        type=\"primary\"\n      >\n        Create Note\n      </Button>\n\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://ihwntaqvy5dpdlooobp45klcwy.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-7u2kscps6raxjj3fipcbx4ofpy\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}